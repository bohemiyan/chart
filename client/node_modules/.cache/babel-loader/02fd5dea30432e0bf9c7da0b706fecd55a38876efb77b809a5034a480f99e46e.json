{"ast":null,"code":"var _jsxFileName = \"/home/chirag/Desktop/GITHUB/MINE/chart/client/src/Components/Charts/monthlyPi/monthlyPie.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Chart from \"chart.js/auto\";\nimport './monthlypi.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MonthlySalesPieChart = _ref => {\n  _s();\n  let {\n    data\n  } = _ref;\n  const chartRef = useRef(null);\n  const [selectedMonth, setSelectedMonth] = useState(0);\n  useEffect(() => {\n    const chartData = {\n      labels: data.map(product => product.productName),\n      datasets: [{\n        data: data.map(product => product.salesData[selectedMonth]),\n        backgroundColor: [\"#ff6384\", \"#36a2eb\", \"#ffce56\", \"#8aff9f\"],\n        hoverBackgroundColor: [\"#ff6384\", \"#36a2eb\", \"#ffce56\", \"#8aff9f\"]\n      }]\n    };\n    const myChartRef = chartRef.current.getContext(\"2d\");\n    const myChart = new Chart(myChartRef, {\n      type: \"pie\",\n      data: chartData,\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          title: {\n            display: true,\n            text: `Sales for ${getMonthName(selectedMonth)}`,\n            fontSize: 16\n          }\n        }\n      }\n    });\n    return () => {\n      myChart.destroy();\n    };\n  }, [data, selectedMonth]);\n  const handleMonthChange = event => {\n    setSelectedMonth(parseInt(event.target.value));\n  };\n  const getMonthName = monthIndex => {\n    const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    return months[monthIndex];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"MonthlyPi\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: Array.from({\n        length: 1\n      }, (_, i) => {\n        const monthIndex = i;\n        return /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: \"month\",\n            value: monthIndex,\n            checked: selectedMonth === monthIndex,\n            onChange: handleMonthChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this), getMonthName(monthIndex)]\n        }, monthIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: chartRef,\n      width: 400,\n      height: 400\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(MonthlySalesPieChart, \"IMAuhFRAf/N8ttH11CRv49gvgFQ=\");\n_c = MonthlySalesPieChart;\nexport default MonthlySalesPieChart;\nvar _c;\n$RefreshReg$(_c, \"MonthlySalesPieChart\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Chart","jsxDEV","_jsxDEV","MonthlySalesPieChart","_ref","_s","data","chartRef","selectedMonth","setSelectedMonth","chartData","labels","map","product","productName","datasets","salesData","backgroundColor","hoverBackgroundColor","myChartRef","current","getContext","myChart","type","options","responsive","maintainAspectRatio","plugins","title","display","text","getMonthName","fontSize","destroy","handleMonthChange","event","parseInt","target","value","monthIndex","months","className","children","Array","from","length","_","i","name","checked","onChange","fileName","_jsxFileName","lineNumber","columnNumber","ref","width","height","_c","$RefreshReg$"],"sources":["/home/chirag/Desktop/GITHUB/MINE/chart/client/src/Components/Charts/monthlyPi/monthlyPie.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport Chart from \"chart.js/auto\";\nimport './monthlypi.css'\n\nconst MonthlySalesPieChart = ({ data }) => {\n  const chartRef = useRef(null);\n  const [selectedMonth, setSelectedMonth] = useState(0);\n\n  useEffect(() => {\n    const chartData = {\n      labels: data.map((product) => product.productName),\n      datasets: [\n        {\n          data: data.map((product) => product.salesData[selectedMonth]),\n          backgroundColor: [\"#ff6384\", \"#36a2eb\", \"#ffce56\", \"#8aff9f\"],\n          hoverBackgroundColor: [\"#ff6384\", \"#36a2eb\", \"#ffce56\", \"#8aff9f\"],\n        },\n      ],\n    };\n\n    const myChartRef = chartRef.current.getContext(\"2d\");\n    const myChart = new Chart(myChartRef, {\n      type: \"pie\",\n      data: chartData,\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          title: {\n            display: true,\n            text: `Sales for ${getMonthName(selectedMonth)}`,\n            fontSize: 16,\n          },\n        },\n      },\n    });\n\n    return () => {\n      myChart.destroy();\n    };\n  }, [data, selectedMonth]);\n\n  const handleMonthChange = (event) => {\n    setSelectedMonth(parseInt(event.target.value));\n  };\n\n  const getMonthName = (monthIndex) => {\n    const months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    return months[monthIndex];\n  };\n\n  return (\n    <div className=\"MonthlyPi\">\n     \n      <div>\n        {Array.from({ length: 1}, (_, i) => {\n          const monthIndex = i;\n          return (\n            <label key={monthIndex}>\n              <input\n                type=\"radio\"\n                name=\"month\"\n                value={monthIndex}\n                checked={selectedMonth === monthIndex}\n                onChange={handleMonthChange}\n              />\n              {getMonthName(monthIndex)}\n            </label>\n          );\n        })}\n      </div>\n      <canvas ref={chartRef} width={400} height={400} />\n    </div>\n  );\n};\n\nexport default MonthlySalesPieChart;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,eAAe;AACjC,OAAO,iBAAiB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAExB,MAAMC,oBAAoB,GAAGC,IAAA,IAAc;EAAAC,EAAA;EAAA,IAAb;IAAEC;EAAK,CAAC,GAAAF,IAAA;EACpC,MAAMG,QAAQ,GAAGT,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EAErDF,SAAS,CAAC,MAAM;IACd,MAAMa,SAAS,GAAG;MAChBC,MAAM,EAAEL,IAAI,CAACM,GAAG,CAAEC,OAAO,IAAKA,OAAO,CAACC,WAAW,CAAC;MAClDC,QAAQ,EAAE,CACR;QACET,IAAI,EAAEA,IAAI,CAACM,GAAG,CAAEC,OAAO,IAAKA,OAAO,CAACG,SAAS,CAACR,aAAa,CAAC,CAAC;QAC7DS,eAAe,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;QAC7DC,oBAAoB,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS;MACnE,CAAC;IAEL,CAAC;IAED,MAAMC,UAAU,GAAGZ,QAAQ,CAACa,OAAO,CAACC,UAAU,CAAC,IAAI,CAAC;IACpD,MAAMC,OAAO,GAAG,IAAItB,KAAK,CAACmB,UAAU,EAAE;MACpCI,IAAI,EAAE,KAAK;MACXjB,IAAI,EAAEI,SAAS;MACfc,OAAO,EAAE;QACPC,UAAU,EAAE,IAAI;QAChBC,mBAAmB,EAAE,KAAK;QAC1BC,OAAO,EAAE;UACPC,KAAK,EAAE;YACLC,OAAO,EAAE,IAAI;YACbC,IAAI,EAAG,aAAYC,YAAY,CAACvB,aAAa,CAAE,EAAC;YAChDwB,QAAQ,EAAE;UACZ;QACF;MACF;IACF,CAAC,CAAC;IAEF,OAAO,MAAM;MACXV,OAAO,CAACW,OAAO,EAAE;IACnB,CAAC;EACH,CAAC,EAAE,CAAC3B,IAAI,EAAEE,aAAa,CAAC,CAAC;EAEzB,MAAM0B,iBAAiB,GAAIC,KAAK,IAAK;IACnC1B,gBAAgB,CAAC2B,QAAQ,CAACD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC;EAChD,CAAC;EAED,MAAMP,YAAY,GAAIQ,UAAU,IAAK;IACnC,MAAMC,MAAM,GAAG,CACb,SAAS,EACT,UAAU,EACV,OAAO,EACP,OAAO,EACP,KAAK,EACL,MAAM,EACN,MAAM,EACN,QAAQ,EACR,WAAW,EACX,SAAS,EACT,UAAU,EACV,UAAU,CACX;IACD,OAAOA,MAAM,CAACD,UAAU,CAAC;EAC3B,CAAC;EAED,oBACErC,OAAA;IAAKuC,SAAS,EAAC,WAAW;IAAAC,QAAA,gBAExBxC,OAAA;MAAAwC,QAAA,EACGC,KAAK,CAACC,IAAI,CAAC;QAAEC,MAAM,EAAE;MAAC,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,KAAK;QAClC,MAAMR,UAAU,GAAGQ,CAAC;QACpB,oBACE7C,OAAA;UAAAwC,QAAA,gBACExC,OAAA;YACEqB,IAAI,EAAC,OAAO;YACZyB,IAAI,EAAC,OAAO;YACZV,KAAK,EAAEC,UAAW;YAClBU,OAAO,EAAEzC,aAAa,KAAK+B,UAAW;YACtCW,QAAQ,EAAEhB;UAAkB;YAAAiB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAC5B,EACDvB,YAAY,CAACQ,UAAU,CAAC;QAAA,GARfA,UAAU;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QASd;MAEZ,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACE,eACNpD,OAAA;MAAQqD,GAAG,EAAEhD,QAAS;MAACiD,KAAK,EAAE,GAAI;MAACC,MAAM,EAAE;IAAI;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC9C;AAEV,CAAC;AAACjD,EAAA,CAnFIF,oBAAoB;AAAAuD,EAAA,GAApBvD,oBAAoB;AAqF1B,eAAeA,oBAAoB;AAAC,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}